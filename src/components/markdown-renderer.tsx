"use client";

import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { CodeBlock } from './code-block';
import DOMPurify from 'dompurify';

export interface MarkdownRendererProps {
  content: string;
}

export const MarkdownRenderer = ({ content }: MarkdownRendererProps) => {
  // Sanitize content to prevent XSS attacks
  const sanitizedContent = DOMPurify.sanitize(content);
  
  return (
    <div className="prose dark:prose-invert max-w-none">
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        components={{
          pre({ node, children, ...props }) {
            // The `pre` element generated by react-markdown has a single `code` child.
            // We want to pass its props to our CodeBlock.
            const codeChild = React.Children.toArray(children)[0] as React.ReactElement<{ className?: string, children: React.ReactNode }>;
            
            if (codeChild && codeChild.props) {
              const languageMatch = /language-(\w+)/.exec(codeChild.props.className || '');
              return (
                <CodeBlock language={languageMatch ? languageMatch[1] : ''}>
                  {String(codeChild.props.children).replace(/\n$/, '')}
                </CodeBlock>
              );
            }
            // Fallback for any other case, though unlikely with standard markdown.
            return <pre {...props}>{children}</pre>;
          },
          code({ node, className, children, ...props }) {
            // This will only render for inline code, as code within `pre` is handled above.
            return (
              <code className={className} {...props}>
                {children}
              </code>
            );
          },
        }}
      >
        {sanitizedContent}
      </ReactMarkdown>
    </div>
  );
};
